-- Определение типа для записи о выплате (repayment)
CREATE OR REPLACE TYPE repayment_type AS OBJECT (
    repayment_date DATE,
    repayment_amount NUMBER(18,2)
);
/

-- Определение типа для таблицы выплат
CREATE OR REPLACE TYPE repayment_array_type AS TABLE OF repayment_type;
/

-- Определение типа для строки результата распределения
CREATE OR REPLACE TYPE allocation_row_type AS OBJECT (
    contract_id      VARCHAR2(32),
    percent_date     DATE,
    percent_amount   NUMBER(18,2),
    repayment_amount NUMBER(18,2),
    repayment_date   DATE
);
/

-- Определение типа для таблицы результатов распределения
CREATE OR REPLACE TYPE allocation_table_type AS TABLE OF allocation_row_type;
/

-- Создание конвейерной функции allocate_repayments
CREATE OR REPLACE FUNCTION allocate_repayments
RETURN allocation_table_type PIPELINED
IS
    -- Объявление пользовательского типа записи для процентов
    TYPE percent_rec_type IS RECORD (
        contract_id    VARCHAR2(32 CHAR),
        currency_ccode VARCHAR2(3 CHAR),
        rate_type      VARCHAR2(15),
        contract_rate  NUMBER,
        percent_amount NUMBER(18,2),
        rate_begin_date DATE,
        rate_end_date   DATE,
        rn             NUMBER
    );

    -- Объявление переменных
    rec_percent       percent_rec_type;          -- Запись для хранения данных о процентах из курсора
    repayment_arr      repayment%ROWTYPE;      -- Запись для хранения данных о выплате из цикла
    repayments_arr     repayment_array_type := repayment_array_type(); -- Массив для хранения всех выплат
    remaining_repayment NUMBER(18,2) := 0;    -- Остаток от предыдущих выплат, который нужно применить
    percent_cursor    SYS_REFCURSOR;          -- Курсор для выбора данных о процентах
    i                 INTEGER;                 -- Индекс для обхода массива выплат
    temp_repayment    repayment_type;       -- Временная переменная для хранения данных о выплате
    new_repayment     repayment_type;      -- Новая переменная для временного хранения данных о выплате
    j                 INTEGER := 1;            -- Индекс для отслеживания последней использованной выплаты
    alloc_row        allocation_row_type;   -- Переменная для хранения строки результата
    err_msg           VARCHAR2(200);          -- Переменная для хранения сообщений об ошибках
BEGIN
    -- Инициализация индекса j
    j := 1;

    -- Блок обработки ошибок для цикла сбора выплат
    BEGIN
        -- 2. Открытие курсора для выбора данных о процентах
        OPEN percent_cursor FOR
          SELECT
            p.contract_id,
            p.currency_ccode,
            p.rate_type,
            p.contract_rate,
            p.percent_amount,
            p.rate_begin_date,
            p.rate_end_date,
            rn
          FROM (
            SELECT
              percent.contract_id,
              percent.currency_ccode,
              percent.rate_type,
              percent.contract_rate,
              percent.percent_amount,
              percent.rate_begin_date,
              percent.rate_end_date,
              ROW_NUMBER() OVER (PARTITION BY percent.contract_id ORDER BY percent.rate_begin_date) AS rn
            FROM
              percent
          ) p
        ORDER BY
          p.rate_begin_date;
    EXCEPTION
       WHEN OTHERS THEN
           err_msg := 'Ошибка при открытии курсора процентов: ' || SQLERRM;
           RAISE_APPLICATION_ERROR(-20002, err_msg);
    END;

    -- 3. Основной цикл обработки
    LOOP
        -- 3.1. Извлечение данных о проценте из курсора
        BEGIN
            FETCH percent_cursor INTO rec_percent;
            EXIT WHEN percent_cursor%NOTFOUND;
            remaining_repayment := 0; -- Обнуление остатка для нового процента
            i := j;
            repayments_arr := repayment_array_type(); -- Reset repayments for new percentage
            -- Add repayments for the current contract ID
            FOR repayment_arr IN (SELECT repayment_date, repayment_amount FROM repayment WHERE contract_id = rec_percent.contract_id ORDER BY repayment_date)
             LOOP
                 new_repayment := repayment_type(repayment_arr.repayment_date, repayment_arr.repayment_amount);
                 repayments_arr.EXTEND;
                 repayments_arr(repayments_arr.LAST) := new_repayment;
             END LOOP;
        EXCEPTION
            WHEN OTHERS THEN
              err_msg := 'Ошибка при выборке из курсора процентов: ' || SQLERRM;
              RAISE_APPLICATION_ERROR(-20003, err_msg);
        END;
        -- 3.2. Цикл обхода массива выплат для текущего процента
        WHILE i <= repayments_arr.COUNT
        LOOP
            -- Блок обработки ошибок распределения выплат
            BEGIN
                -- 3.2.1. Проверка, есть ли доступные выплаты для распределения
                IF (repayments_arr(i).repayment_amount > 0) THEN
                    -- 3.2.2. Распределение выплаты, если ее хватает
                    IF (repayments_arr(i).repayment_amount >= rec_percent.percent_amount - remaining_repayment) THEN
                         -- Создание строки результата
                        alloc_row := allocation_row_type(
                            rec_percent.contract_id,
                            rec_percent.rate_begin_date,
                            rec_percent.percent_amount,
                            rec_percent.percent_amount - remaining_repayment,
                            repayments_arr(i).repayment_date
                        );
                        -- Возвращение строки результата
                        PIPE ROW(alloc_row);
                        -- Обновление оставшейся суммы выплаты
                        temp_repayment := repayments_arr(i);
                        temp_repayment.repayment_amount := (repayments_arr(i).repayment_amount - (rec_percent.percent_amount - remaining_repayment));
                        repayments_arr(i) := temp_repayment;
                        -- Обновление остатка
                        remaining_repayment := rec_percent.percent_amount;
                        -- Если вся сумма процента покрыта, переходим к следующему проценту
                        IF remaining_repayment = rec_percent.percent_amount THEN
                            j := i;
                            EXIT;
                        END IF;
                   ELSE
                        -- 3.2.3. Распределение остатка выплаты, если ее недостаточно для полного покрытия
                        alloc_row := allocation_row_type(
                            rec_percent.contract_id,
                           rec_percent.rate_begin_date,
                           rec_percent.percent_amount,
                           repayments_arr(i).repayment_amount,
                           repayments_arr(i).repayment_date
                           );
                        -- Возвращение строки результата
                        PIPE ROW(alloc_row);
                         -- Обновление остатка
                        remaining_repayment := remaining_repayment + repayments_arr(i).repayment_amount;
                        -- Обнуление текущей выплаты
                        temp_repayment := repayments_arr(i);
                        temp_repayment.repayment_amount := 0;
                        repayments_arr(i) := temp_repayment;
                    END IF;
                END IF;
           EXCEPTION
             WHEN OTHERS THEN
                err_msg := 'Ошибка при распределении выплат: ' || SQLERRM;
                RAISE_APPLICATION_ERROR(-20004, err_msg);
           END;
            i := i + 1;
        END LOOP;
        -- Дополнительная проверка и добавление строки, если после цикла WHILE остались непокрытые проценты
        IF remaining_repayment < rec_percent.percent_amount THEN
              alloc_row := allocation_row_type(
                rec_percent.contract_id,
                rec_percent.rate_begin_date,
                rec_percent.percent_amount,
                rec_percent.percent_amount - remaining_repayment,
                NULL  -- Дата выплаты NULL, т.к. ее нет
              );
              PIPE ROW(alloc_row);
        END IF;
    END LOOP;
    -- Закрытие курсора
    BEGIN
        CLOSE percent_cursor;
    EXCEPTION
            WHEN OTHERS THEN
               err_msg := 'Ошибка при закрытии курсора процентов: ' || SQLERRM;
                RAISE_APPLICATION_ERROR(-20005, err_msg);
    END;
    RETURN;
END;
/

-- Создание таблиц
CREATE TABLE percent(
contract_id varchar2(32),
currency_ccode varchar2(3),
rate_type varchar2(15),
contract_rate number,
percent_amount number(18,2),
rate_begin_date date,
rate_end_date date
);
/
CREATE TABLE repayment(
repayment_order number,
contract_sid  number,
contract_id varchar2(32),
currency_ccode varchar2(3),
accound_sid number,
repayment_date date,
repayment_amount number(18,2),
percent_amount_rub number,
exchange_rate_date date,
exchange_rate number
);
/

-- Добавление тестовых данных
INSERT INTO percent (contract_id, currency_ccode, rate_type, contract_rate, percent_amount, rate_begin_date, rate_end_date) VALUES
('165284', '987', 'Нефик', 4.45, 244993.17, TO_DATE('01.01.2024', 'DD.MM.YYYY'), TO_DATE('31.01.2024', 'DD.MM.YYYY')),
('165284', '987', 'Нефик', 4.45, 229187.15, TO_DATE('01.02.2024', 'DD.MM.YYYY'), TO_DATE('29.02.2024', 'DD.MM.YYYY')),
('165284', '987', 'Нефик', 4.45, 244993.17, TO_DATE('01.03.2024', 'DD.MM.YYYY'), TO_DATE('31.03.2024', 'DD.MM.YYYY')),
('165284', '987', 'Нефик', 4.45, 237090.17, TO_DATE('01.04.2024', 'DD.MM.YYYY'), TO_DATE('30.04.2024', 'DD.MM.YYYY')),
('165284', '987', 'Нефик', 4.45, 244993.17, TO_DATE('01.05.2024', 'DD.MM.YYYY'), TO_DATE('31.05.2024', 'DD.MM.YYYY')),
('165284', '987', 'Нефик', 4.45, 237090.16, TO_DATE('01.06.2024', 'DD.MM.YYYY'), TO_DATE('30.06.2024', 'DD.MM.YYYY')),
('165284', '987', 'Нефик', 4.45, 237090.16, TO_DATE('01.06.2024', 'DD.MM.YYYY'), TO_DATE('30.06.2024', 'DD.MM.YYYY')),
('165284', '987', 'Нефик', 4.45, 244993.17, TO_DATE('01.07.2024', 'DD.MM.YYYY'), TO_DATE('31.07.2024', 'DD.MM.YYYY')),
('165284', '987', 'Нефик', 4.45, 221284.15, TO_DATE('01.08.2024', 'DD.MM.YYYY'), TO_DATE('28.08.2024', 'DD.MM.YYYY')),
('166799', '978', 'Нефик', 4.45, 2261475.41, TO_DATE('01.01.2024', 'DD.MM.YYYY'), TO_DATE('31.01.2024', 'DD.MM.YYYY')),
('166799', '978', 'Нефик', 4.45, 2115573.77, TO_DATE('01.02.2024', 'DD.MM.YYYY'), TO_DATE('29.02.2024', 'DD.MM.YYYY')),
('166799', '978', 'Нефик', 4.45, 2261475.41, TO_DATE('01.03.2024', 'DD.MM.YYYY'), TO_DATE('31.03.2024', 'DD.MM.YYYY')),
('166799', '978', 'Нефик', 4.45, 2188524.59, TO_DATE('01.04.2024', 'DD.MM.YYYY'), TO_DATE('30.04.2024', 'DD.MM.YYYY')),
('166799', '978', 'Нефик', 4.45, 2261475.41, TO_DATE('01.05.2024', 'DD.MM.YYYY'), TO_DATE('31.05.2024', 'DD.MM.YYYY')),
('166799', '978', 'Нефик', 4.45, 2188524.59, TO_DATE('01.06.2024', 'DD.MM.YYYY'), TO_DATE('30.06.2024', 'DD.MM.YYYY')),
('166799', '978', 'Нефик', 4.45, 2261475.41, TO_DATE('01.07.2024', 'DD.MM.YYYY'), TO_DATE('31.07.2024', 'DD.MM.YYYY')),
('166799', '978', 'Нефик', 4.45, 2042622.95, TO_DATE('01.08.2024', 'DD.MM.YYYY'), TO_DATE('28.08.2024', 'DD.MM.YYYY'));
/
INSERT INTO repayment (repayment_order, contract_sid, contract_id, currency_ccode, accound_sid, repayment_date, repayment_amount) VALUES
(1, 165284, '165284', '987', 2212322, TO_DATE('20.06.2024', 'DD.MM.YYYY'), 1351413.93),
(2, 165284, '165284', '987', 2212322, TO_DATE('28.08.2024', 'DD.MM.YYYY'), 553210.38),
(1, 166799, '166799', '978', 2212322, TO_DATE('20.06.2024', 'DD.MM.YYYY'), 12474590.16),
(2, 166199, '166199', '978', 2212322, TO_DATE('28.08.2024', 'DD.MM.YYYY'), 5106557.38);
/

SELECT * FROM TABLE(allocate_repayments());
/
