CREATE OR REPLACE FUNCTION allocate_repayments
  RETURN repayment_table_type PIPELINED
AS

  -- Record type for processing percent records
  TYPE percent_rec_type IS RECORD (
      contact_id     INT,
      percent_date   DATE,
      percent_amount NUMBER(15, 2),
      rn             INT
  );
  rec_percent  percent_rec_type;
  
  -- Record type for repayment records
  TYPE repayment_rec_type_temp IS RECORD (
    repayment_date DATE,
    repayment_amount NUMBER(15,2)
  );
  
  repayment_arr repayment_rec_type_temp;
  
  -- Array type to hold repayment records 
  TYPE repayment_array_type IS TABLE OF repayment_rec_type_temp;
  repayments_arr repayment_array_type := repayment_array_type();
  
  remaining_repayment NUMBER(15, 2);
  i            INT;
  temp_repayment  repayment_rec_type_temp;
  j            INT := 1;
  
  -- Cursor for fetching percent data
  CURSOR percent_cursor IS
    SELECT
      p.contact_id,
      p.percent_date,
      p.percent_amount,
      rn
    FROM
      (
        SELECT
          percent.contact_id,
          percent.percent_date,
          percent.percent_amount,
          ROW_NUMBER() OVER(PARTITION BY percent.contact_id
        ORDER BY
          percent.percent_date) AS rn
        FROM
          percent
      ) p
    ORDER BY
      percent_date;
BEGIN

    -- Populate repayment array
    FOR repayment_arr IN (SELECT repayment_date, repayment_amount FROM repayment ORDER BY repayment_date) 
      LOOP
          repayments_arr.extend;
          repayments_arr(repayments_arr.last).repayment_date := repayment_arr.repayment_date;
          repayments_arr(repayments_arr.last).repayment_amount := repayment_arr.repayment_amount;
      END LOOP;
    
    OPEN percent_cursor;
  
  LOOP
    FETCH percent_cursor INTO rec_percent;
    EXIT WHEN percent_cursor%NOTFOUND;
    
    remaining_repayment := 0;
    i := j;
    
    WHILE i <= repayments_arr.COUNT 
    LOOP
      IF repayments_arr(i).repayment_amount > 0 THEN -- corrected line
        IF repayments_arr(i).repayment_amount >= rec_percent.percent_amount - remaining_repayment THEN -- corrected line
         
            PIPE ROW (repayment_rec_type(
              rec_percent.contact_id,
              rec_percent.percent_date,
              rec_percent.percent_amount,
              rec_percent.percent_amount - remaining_repayment,
              (repayments_arr(i)).repayment_date
            ));

          temp_repayment := repayments_arr(i);
          temp_repayment.repayment_amount := repayments_arr(i).repayment_amount - (rec_percent.percent_amount - remaining_repayment); -- corrected line
          repayments_arr(i) := temp_repayment;
          remaining_repayment := rec_percent.percent_amount;

           IF remaining_repayment = rec_percent.percent_amount THEN
              j := i;
              EXIT;
            END IF;
        ELSE
         
             PIPE ROW (repayment_rec_type(
                101,
                rec_percent.percent_date,
                rec_percent.percent_amount,
                repayments_arr(i).repayment_amount,
                (repayments_arr(i)).repayment_date
            ));

          remaining_repayment := remaining_repayment + repayments_arr(i).repayment_amount;-- corrected line
          temp_repayment := repayments_arr(i);
          temp_repayment.repayment_amount := 0;
          repayments_arr(i) := temp_repayment;

        END IF;
      END IF;
      i := i + 1;
    END LOOP;
   
  END LOOP;
  
  CLOSE percent_cursor;
  
  RETURN;
END;
/
